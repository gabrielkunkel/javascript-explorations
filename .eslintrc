/**

0 means "turned off/disregard"
1 means "warn if this happens"
2 means "error! if this happens"

*/

{
  //"parser": "babel-eslint",

  "env": {
    "browser": true,     // browser global variables.
    "commonjs": false,      // CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).
    "node": false,        // Node.js global variables and Node.js-specific rules
    "mocha": false,       // adds all of the Mocha testing global variables.
    "jasmine": true,     // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    "phantomjs": true,   // phantomjs global variables.
    "jquery": false,      // jquery global variables.
    "prototypejs": false, // prototypejs global variables.
    "shelljs": false,     // shelljs global variables.
    "es6": false // enable all ECMAScript 6 features except for modules.
  },

  "globals": {
    // e.g. "angular": true
  },

  "plugins": [
    "jasmine"
  ],

  "rules": {
    ////////// Possible Errors //////////

    "comma-dangle": 2,         //trailing commas in object literals
    "no-cond-assign": 2,          //assignment in conditional expressions
    "no-console": 2,              //use of console (off by default in the node environment)
    "no-constant-condition": 2,   //use of constant expressions in conditions
    "no-control-regex": 2,        //control characters in regular expressions
    "no-debugger": 2,             //use of debugger
    "no-dupe-keys": 2,            //duplicate keys when creating object literals
    "no-empty": 2,                //empty statements
    "no-empty-character-class": 2,   //the use of empty character classes in regular expressions
    "no-ex-assign": 2,            //assigning to the exception in a catch block
    "no-extra-boolean-cast": 2,   //prevent 2 or more negation boolean casts: "if (!!a) or (!!!a) {...}"
    "no-extra-parens": 2,         //unnecessary parentheses (off by default)
    "no-extra-semi": 2,           // [FIXABLE] unnecessary semicolons
    "no-func-assign": 1,          //overwriting functions written as function declarations
    "no-inner-declarations": 2,   //function or variable declarations in nested blocks
    "no-invalid-regexp": 2,       //invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2, //irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 1,       //negation of left operand of an in expression PREVENT: "if(!a in b)" when you meant "if(!(a in b))"
    "no-obj-calls": 2,            //the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 2,         //multiple spaces in a regular expression literal
    "no-sparse-arrays": 2,        //sparse arrays, PREVENT: "[,,24]" or "['blue',,'green']
    "no-unreachable": 2,          //unreachable statements after a return, throw, continue, or break statement
    "use-isnan": 2,               //comparisons with the value NaN
    "valid-jsdoc": 2,             // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 2,            // Ensure that the results of typeof are compared against a valid string


    ////////// Best Practices //////////

    "accessor-pairs": 2,        // Enforces getter/setter pairs in objects
    "block-scoped-var": 0,      // treat var statements as if they were block scoped (off by default)
    "complexity": [2, 5],      // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 0,     // require return statements to either always or never specify values
    "curly": 2,                 // specify curly brace conventions for all control statements
    "default-case": 2,          // require default case in switch statements (off by default)
    "dot-notation": 2,          // encourages use of dot notation whenever possible
    "eqeqeq": 2,                // [FIXABLE] require the use of === and !==
    "guard-for-in": 0,          // make sure for-in loops have an if statement (off by default)
    "no-alert": 0,              //the use of alert, confirm, and prompt
    "no-caller": 0,             //use of arguments.caller or arguments.callee
    "no-div-regex": 0,          //division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 0,        //else after a return in an if (off by default)
    "no-empty-label": 0,        //use of labels for anything other then loops and switches
    "no-eq-null": 0,            //comparisons to null without a type-checking operator (off by default)
    "no-eval": 0,               //use of eval()
    "no-extend-native": 0,      //adding to native types
    "no-extra-bind": 0,         //unnecessary function binding
    "no-fallthrough": 2,        //fallthrough of case statements
    "no-floating-decimal": 0,   //the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": 0,       //use of eval()-like methods
    "no-iterator": 0,           //usage of __iterator__ property
    "no-labels": 0,             //use of labeled statements
    "no-lone-blocks": 0,        //unnecessary nested blocks
    "no-loop-func": 0,          //creation of functions within loops
    "no-multi-spaces": 0,       // [FIXABLE] use of multiple spaces
    "no-multi-str": 0,          //use of multiline strings
    "no-native-reassign": 0,    //reassignments of native objects
    "no-new": 0,                //use of new operator when not part of the assignment or comparison
    "no-new-func": 0,           //use of new operator for Function object
    "no-new-wrappers": 0,       // disallows creating new instances of String, Number, and Boolean
    "no-octal": 0,              //use of octal literals
    "no-octal-escape": 0,       //use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-process-env": 0,        //use of process.env (off by default)
    "no-proto": 2,              //usage of __proto__ property
    "no-redeclare": 2,          //declaring the same variable more then once
    "no-return-assign": 0,      //use of assignment in return statement
    "no-script-url": 2,         //use of javascript: urls.
    "no-self-compare": 0,       //comparisons where both sides are exactly the same (off by default)
    "no-sequences": 2,          //use of comma operator
    "no-unused-expressions": 0, //usage of expressions in statement position
    "no-void": 0,               //use of void operator (off by default)
    "no-warning-comments": 0,   //usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
    "no-with": 0,               //use of the with statement
    "radix": 0,                 // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 0,           // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 0,             // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": 0,                  // require or disallow Yoda conditions


    ////////// Strict Mode //////////

    "strict": 0,          // controls location of Use Strict Directives


    ////////// Variables //////////

    "init-declarations": 0, //Enforce/Disallow Variable Initializations, "always" means always initialize when you declare
    "no-catch-shadow": 0,             //the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 2,               //deletion of variables
    "no-label-var": 0,                //labels that share a name with a variable
    "no-shadow": 0,                   //declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 2,  //shadowing of names such as arguments
    "no-undef": 0,                    //use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": 0,               //use of undefined when initializing variables
    "no-undefined": 0,                //use of undefined variable (off by default)
    "no-unused-vars": 0,              //declaration of variables that are not used in the code
    "no-use-before-define": 0,        //use of variables before they are defined

    ////////// Stylistic Issues //////////

    "array-bracket-spacing": 0,     // [FIXABLE] spaces inside of brackets
    "block-spacing": 0,             // [FIXABLE] spaces inside of single line blocks
    "brace-style": 0,               // enforce one true brace style (off by default)
    "camelcase": 0,                 // require camel case names
    "comma-spacing": 0,             // enforce spacing before and after comma
    "comma-style": 0,               // enforce one true comma style (off by default)
    "consistent-this": 0,           // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 0,                  // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0,                // require function expressions to have a name (off by default)
    "func-style": 0,                // enforces use of function declarations or expressions (off by default)
    "indent": [2, 2],               // specify tab or space width for your code (fixable)
    "key-spacing": 0,               // enforces spacing between keys and values in object literal properties
    "max-nested-callbacks": [2, 5],      // specify the maximum depth callbacks can be nested (off by default)
    "new-cap": 2,                   // require a capital letter for constructors
    "new-parens": 0,                //the omission of parentheses when invoking a constructor with no arguments
    "no-array-constructor": 0,      //use of the Array constructor
    "no-inline-comments": 0,        //comments inline after code (off by default)
    "no-lonely-if": 0,              //if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": 2,  //mixed spaces and tabs for indentation
    "no-multiple-empty-lines": 0,   //multiple empty lines (off by default)
    "no-nested-ternary": 0,         //nested ternary expressions (off by default)
    "no-new-object": 0,             //use of the Object constructor
    "no-spaced-func": 0,            //space between function identifier and application
    "no-ternary": 0,                //the use of ternary operators (off by default)
    "no-trailing-spaces": 0,        //trailing whitespace at the end of lines
    "no-underscore-dangle": 0,      //dangling underscores in identifiers
    "no-wrap-func": 0,              //wrapping of non-IIFE statements in parens
    "one-var": 0,                   // allow just one var statement per function (off by default)
    "operator-assignment": 0,       // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "padded-blocks": 0,             // enforce padding within blocks (off by default)
    "quote-props": 0,               // require quotes around object literal property names (off by default)
    "quotes": 0,                    // specify whether double or single quotes should be used
    "semi": 0,                      // [FIXABLE] require or disallow use of semicolons instead of ASI
    "semi-spacing": 0,              //space before semicolon
    "sort-vars": 0,                 // alphabetically sort variables within the same declaration block (off by default)
    "space-after-function-name": 0, // require a space after function names (off by default)
    "space-after-keywords": 0,      // require a space after certain keywords (off by default)
    "space-before-blocks": 0,       // require or disallow space before blocks (off by default)
    "space-in-brackets": 0,         // require or disallow spaces inside brackets (off by default)
    "space-in-parens": 0,           // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": 0,           // require spaces around operators
    "space-return-throw-case": 0,   // require a space after return, throw, and case
    "space-unary-ops": 0,           // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-line-comment": 0,       // require or disallow a space immediately following the // in a line comment (off by default)
    "wrap-regex": 0,                // require regex literals to be wrapped in parentheses (off by default)


    ////////// ECMAScript 6 //////////

    "no-var": 0,          // require let or const instead of var (off by default)
    "generator-star": 0,  // enforce the position of the * in generator functions (off by default)


    ////////// Legacy //////////

    "max-depth": [2, 4],       // specify the maximum depth that blocks can be nested (off by default)
    "max-len": [2, 120, 2],         // specify the maximum length of a line in your program (off by default)
    "max-params": 0,      // limits the number of parameters that can be used in the function declaration. (off by default)
    "max-statements": [2, 30],  // specify the maximum number of statement allowed in a function (off by default)
    "no-bitwise": 0,      //use of bitwise operators (off by default)
    "no-plusplus": 2,      //use of unary operators, ++ and -- (off by default)

    ///////// AngularJs ///////////
/*

    "angular/angularelement": 2,            // use angular.element instead of $ or jQuery
    "angular/controller-as": 2,             // disallow assignments to $scope in controllers
    "angular/controller-as-route": 2,       //  require the use of controllerAs in routes or states
    "angular/controller-as-vm": [2, "ctrl"],  // controller-as-vm - require and specify a capture variable for this in controllers
    "angular/controller-name": 0,           // require and specify a prefix for all controller names
    "angular/deferred": 0,                  //  use $q(function(resolve, reject){}) instead of $q.deferred
    "angular/definedundefined": 2,          // use angular.isDefined and angular.isUndefined instead of other undefined checks
    "angular/di": [2, "function"],          // require a consistent DI syntax second element could be "function", "array", or "$inject"
    "angular/di-order": [0, true],          // require DI parameters to be sorted alphabetically
    "angular/directive-name": [2, "gk"],            // require and specify a prefix for all directive names
    "angular/directive-restrict": [0, {"restrict": "AE", "explicit": "never"}], // disallow any other directive restrict than 'A' or 'E'
    "angular/component-limit": [2, 1],      // limit the number of angular components per file
    "angular/document-service": 2,          // use $document instead of document
    "angular/empty-controller": 0,          // disallow empty controllers
    "angular/file-name": [2,{"typeSeparator":"dot","ignoreTypeSuffix":true}], // All your file names should match the angular component name.
    "angular/filter-name": 0,               // require and specify a prefix for all filter names
    "angular/foreach": 0,                   // use angular.forEach instead of native Array.prototype.forEach
    "angular/function-type": [0, "anonymous"],  // require and specify a consistent function style for components ('named' or 'anonymous')
    "angular/interval-service": 2,          // Instead of the default setInterval function, you should use the AngularJS wrapper service $interval
    "angular/json-functions": 2,            // use angular.fromJson and 'angular.toJson' instead of JSON.parse and JSON.stringify
    "angular/log": 2,                       // use the $log service instead of the console methods
    "angular/module-dependency-order": [0, {"grouped": true, "prefix": null}], // Module dependencies should be sorted in a logical manner.
    "angular/module-getter": 2,                 //  disallow to reference modules w/variables. require getter syntax: angular.module('myModule')
    "angular/module-name": 0,                   // require and specify a prefix for all module names
    "angular/module-setter": 2,                 // disallow to assign modules to variables (linked to module-getter
    "angular/no-angular-mock": 0,           // require to use angular.mock methods directly
    "angular/no-controller": 0,             // disallow use of controllers (according to the component first pattern)
    "angular/no-cookiestore": 2,            // use $cookies instead of $cookieStore
    "angular/no-http-callback": 2,          // disallow the $http methods success() and error()
    "angular/no-inline-template": [0, {"allowSimple": true}], // disallow the use of inline templates
    "angular/no-jquery-angularelement": 2, // disallow to wrap angular.element objects with jQuery or $
    "angular/no-private-call": 2,       // disallow use of internal angular properties prefixed with $$
    "angular/no-service-method": 2,     // use factory() instead of service()
    "angular/no-services": 2,           // disallow DI of specified services for other angular components ($http for controllers, filters and directives)
    "angular/on-watch": 2,              // require $on and $watch deregistration callbacks to be saved in a variable
    "angular/one-dependency-per-line": 0, // Injected dependencies should be written one per line.
    "angular/rest-service": 0,        // disallow different rest service and specify one of '$http', '$resource', 'Restangular'
    "angular/service-name": 0,        // require and specify a prefix for all service names
    "angular/timeout-service": 2,     // use $timeout instead of setTimeout
    "angular/typecheck-array": 2,     // use angular.isArray instead of typeof comparisons
    "angular/typecheck-date": 2,      // use angular.isDate instead of typeof comparisons
    "angular/typecheck-function": 2,  // use angular.isFunction instead of typeof comparisons
    "angular/typecheck-number": 2,    // use angular.isNumber instead of typeof comparisons
    "angular/typecheck-object": 2,    // use angular.isObject instead of typeof comparisons
    "angular/typecheck-string": 2,    // use angular.isString instead of typeof comparisons
    "angular/watchers-execution": [0, "$digest"], // require and specify consistent use $scope.digest() or $scope.apply()
    "angular/window-service": 2,       //Instead of the default window object, you should prefer the AngularJS wrapper service $window.
    */

    ////////// Jasmine ///////////
    "jasmine/no-focused-tests": 1,      //  can cause unexpected behaviour if accidentally committed to source control.
    "jasmine/no-disabled-tests": 0,     // Disabled tests are often an indicator of a deeper problem.
    "jasmine/no-spec-dupes": [2, "branch"],  // Multiple specs with same name is confusing and indicator of copy-paste error.
    "jasmine/no-suite-dupes": [2, "branch"], // Multiple suites with same name is confusing and indicator of copy-paste error.
    "jasmine/no-suite-callback-args": 2, // Enforce that a suites's callback does not contain any arguments
    "jasmine/missing-expect": 0, // A test which doesn't make any expectations doesn't really test anything.
    "jasmine/valid-expect": 2 // Ensure expect() is called with a single argument and there is an actual expectation made.

  }
}
